<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="description" content="A web interface for MQTT over Websockets">
    <meta name="author" content="Fabian Affolter">

    <title>Health conditions</title>

    <!-- Bootstrap core CSS -->
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/css/bootstrap.min.css" integrity="sha384-MCw98/SFnGE8fJT3GXwEOngsV7Zt27NXFoaoApmYm81iuXoPkFOJwJ8ERdknLPMO" crossorigin="anonymous">
    <!-- jQuery -->
    <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <!-- Sparkline -->
    <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/jquery-sparklines/2.1.2/jquery.sparkline.min.js"></script>
    <!-- jgPlot -->
    <link class="include" rel="stylesheet" type="text/css" href="https://cdnjs.cloudflare.com/ajax/libs/jqPlot/1.0.9/jquery.jqplot.min.css" />
    <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/jqPlot/1.0.9/jquery.jqplot.js"></script>
    <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/jqPlot/1.0.9/plugins/jqplot.canvasTextRenderer.min.js"></script>
    <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/jqPlot/1.0.9/plugins/jqplot.canvasAxisLabelRenderer.min.js"></script>
    <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/jqPlot/1.0.9/plugins/jqplot.dateAxisRenderer.js"></script>
    <!-- MQTT Websocket -->
    <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/paho-mqtt/1.0.2/mqttws31.js"></script>
    <script type="text/javascript">
        var host = 'INSERT BROKER HOST/ADDRESS';
        var port = 9001;
        var topic = '/gw_1/#';
        var useTLS = false;
        var cleansession = true;
        var mqtt;
        var reconnectTimeout = 2000;
        function MQTTconnect() {
	        if (typeof path == "undefined") {
		        path = '/mqtt';
	        }
	        mqtt = new Paho.MQTT.Client(host, port, path, "mqtt_panel" + parseInt(Math.random() * 100, 10)
            
	    );
            var options = {
                timeout: 3,
                useSSL: useTLS,
                cleanSession: cleansession,
                onSuccess: onConnect,
                onFailure: function (message) {
                    $('#status').html("Connection failed: " + message.errorMessage + "Retrying...");
                    setTimeout(MQTTconnect, reconnectTimeout);
                }
            };
            mqtt.onConnectionLost = onConnectionLost;
            mqtt.onMessageArrived = onMessageArrived;
            console.log("Host: "+ host + ", Port: " + port + ", Path: " + path + " TLS: " + useTLS);
            mqtt.connect(options);
        };
        function onConnect() {
            $('#status').html('Connected to ' + host + ':' + port + path);
            mqtt.subscribe(topic, {qos: 0});
            $('#topic').html(topic);
        };
        function onConnectionLost(response) {
            setTimeout(MQTTconnect, reconnectTimeout);
            $('#status').html("Connection lost: " + responseObject.errorMessage + ". Reconnecting...");
        };
        function onMessageArrived(message) {
            var topic = message.destinationName;
            var payload = message.payloadString;
            //console.log("Topic: " + topic + ", Message payload: " + payload);
            $('#message').html(topic + ', ' + payload);
            var message = topic.split('/');
            var gateway = message[1];
            var device = message[2];
            var timestamp = Math.round((new Date()).getTime() / 1000);
            switch (device) {
                case 'dev_1':
                    $('#value1').html('(Switch value: ' + payload + ')');
		    $('#value5').html('(Gateway: ' + gateway + ')');
		    $('#value6').html('(Device: ' + device + ')');
		    $('#label1').text(payload); 
		    break;
		case 'dev_2':
                    $('#value2').html('(Switch value: ' + payload + ')');
		    $('#value3').html('(Gateway: ' + gateway + ')');
		    $('#value4').html('(Device: ' + device + ')');
		    $('#label2').text(payload); 
                    break;
		 case 'dev_10':
		    $('#livingTempSensor').html('(Sensor value: ' + payload + ')');
                    $('#livingTempLabel').text(payload + '°C');
                    $('#livingTempLabel').removeClass('').addClass('label-default');
                    var entry = new Array();
                    entry.push(timestamp);
                    entry.push(parseInt(payload));
                    livingTemp.push(entry);
                    // Show only 20 values
                    if (livingTemp.length >= 20) {
                        livingTemp.shift()
                    }
                    var livingTempPlot = $.jqplot ('livingTempChart', [livingTemp], {
                        axesDefaults: {
                            labelRenderer: $.jqplot.CanvasAxisLabelRenderer,
                            tickOptions: {
                                showMark: false,
                                showGridline: false,
                                show: false,
                                showLabel: false,
                            }
                          },
                        grid: {
                            gridLineColor: '#FFFFFF',
                            borderWidth: 0,
                            shadow: false,
                        },
                        seriesDefaults: {
                            rendererOptions: {
                                smooth: true
                            },
                            showMarker: false,
                            lineWidth: 2,
                          },
                          axes: {
                            xaxis: {
                              renderer:$.jqplot.DateAxisRenderer,
                              tickOptions:{
                                formatString:'%T'
                              },
                              pad: 0
                            },
                            yaxis: {
                            }
                        }
                    });
                    break;
                case 'basement':
                    $('#basementTempSensor').html('(Sensor value: ' + payload + ')');
                    if (payload >= 25) {
                            $('#basementTempLabel').text(payload + '°C - too hot');
                            $('#basementTempLabel').removeClass('label-warning label-success label-info label-primary').addClass('label-danger');
                    } else if (payload >= 21) {
                            $('#basementTempLabel').text(payload + '°C - hot');
                            $('#basementTempLabel').removeClass('label-danger label-success label-info label-primary').addClass('label-warning');
                    } else if (payload >= 18) {
                            $('#basementTempLabel').text(payload + '°C - normal');
                            $('#basementTempLabel').removeClass('label-danger label-warning label-info label-primary').addClass('label-success');
                    } else if (payload >= 15) {
                            $('#basementTempLabel').text(payload + '°C - low');
                            $('#basementTempLabel').removeClass('label-danger label-warning label-success label-primary').addClass('label-info');
                    } else if (mpayload <= 12) {
                            $('#basementTempLabel').text(payload + '°C - too low');
                            $('#basementTempLabel').removeClass('label-danger label-warning label-success label-info').addClass('label-primary');
                    basementTemp.push(parseInt(payload));
                    if (basementTemp.length >= 20) {
                        basementTemp.shift()
                    }
                    $('.basementTempSparkline').sparkline(basementTemp, {
                        type: 'line',
                        width: '160',
                        height: '40'});
                    }
                    break;
                default: console.log('Error: Data do not match the MQTT topic.'); break;
            }
        };
        $(document).ready(function() {
            MQTTconnect();
        });
    </script>

  </head>

  <body>
    <div id="wrap">
      <div class="container">
        <div class="page-header"><h1><b>Health conditions</b></h1></div>

            <div class="panel panel-default">
              <div class="panel-body">
                    <table class="table table-striped">
                        <tr>
                        <td width="40%" style="vertical-align:middle;"><h3>ECG</h3><small id="value3">(Unknown Gateway)</small><small id="value4"> (Unknown Device)</small></td>
                        <td style="vertical-align:middle;"></td>
                        <td width="30%" style="vertical-align:middle;"><h4>&nbsp;<span id="label2" class="label">Unknown</span></h4></td>
                        </tr>
			<tr>
                        <td width="40%" style="vertical-align:middle;"><h3>PPG</h3><small id="value5">(Unknown Gateway)</small><small id="value6"> (Unknown Device)</small></td>
                        <td style="vertical-align:middle;"></td>
                        <td width="30%" style="vertical-align:middle;"><h4>&nbsp;<span id="label1" class="label">Unknown</span></h4></td>
                        </tr>
			<tr>
                    </table>
              </div>
            </div>
        <div class="panel panel-default">
          <div class="panel-body">
              <div class="row">
                <div class="col-md-6"><b>Latest MQTT message:  </b> <small id="message">no message received</small></div>
                <div class="col-md-6"><b>Status: </b>  <small id='status'></small></div>
              </div>
          </div>
        </div>
      <div class="footer">
    </div>
  </body>
</html>
